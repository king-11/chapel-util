.. default-domain:: chpl

.. module:: OrderedMap
   :synopsis: This module contains the implementation of the orderedMap type 

OrderedMap
==========
**Usage**

.. code-block:: chapel

   use OrderedMap;


or

.. code-block:: chapel

   import OrderedMap;


This module contains the implementation of the orderedMap type 
which is a container that stores key-value associations. 

orderedMaps are not parallel safe by default, but can be made parallel safe by
setting the param formal `parSafe` to true in any orderedMap constructor. When
constructed from another orderedMap, the new orderedMap will inherit 
the parallel safety mode of its originating orderedMap.

OrderedSet supports searching for a certain key, insertion and deletion in O(logN).

.. record:: orderedMap

   .. attribute:: type keyType

      Type of orderedMap keys. 

   .. attribute:: type valType

      Type of orderedMap values. 

   .. attribute:: param parSafe = false

      If `true`, this orderedMap will perform parallel safe operations. 

   .. attribute:: var comparator: record = defaultComparator

      The comparator used to compare keys 

   .. method:: proc init(type keyType, type valType, param parSafe = false, comparator: record = defaultComparator)

      
      Initializes an empty orderedMap containing keys and values of given types.
      
      :arg keyType: The type of the keys of this orderedMap.
      :arg valType: The type of the values of this orderedMap.
      :arg parSafe: If `true`, this orderedMap will use parallel safe operations.
      :type parSafe: bool
      :arg comparator: The comparator used to compare keys.
      

   .. method:: proc init=(const ref other: orderedMap(?kt, ?vt))

      
      Initialize this orderedMap with a copy of each of the elements contained in
      the orderedMap `other`. This orderedMap will inherit the `parSafe` value of 
      the orderedMap `other`.
      
      :arg other: An orderedMap to initialize this orderedMap with.
      

   .. method:: proc clear()

      
      Clears the contents of this orderedMap.
      
      .. warning::
      
        Clearing the contents of this orderedMap will invalidate all existing
        references to the elements contained in this orderedMap.
      

   .. method:: proc size

      
      The current number of keys contained in this orderedMap.
      

   .. method:: proc isEmpty(): bool

      
      Returns `true` if this orderedMap contains zero keys.
      
      :returns: `true` if this orderedMap is empty.
      :rtype: `bool`
      

   .. method:: proc contains(const k: keyType): bool

      
      Returns `true` if the given key is a member of this orderedMap, and `false`
      otherwise.
      
      :arg k: The key to test for membership.
      :type k: keyType
      
      :returns: Whether or not the given key is a member of this orderedMap.
      :rtype: `bool`
      

   .. method:: proc update(other: orderedMap(keyType, valType, ?p))

      
      Updates this orderedMap with the contents of the other, overwriting the values
      for already-existing keys.
      
      :arg other: The other orderedMap
      

   .. method:: proc ref this(k: keyType) ref

      
      Get the value mapped to the given key, or add the mapping if key does not
      exist.
      
      :arg k: The key to access
      :type k: keyType
      
      :returns: Reference to the value mapped to the given key.
      

   .. method:: proc getBorrowed(k: keyType)

      Get a borrowed reference to the element at position `k`.
      

   .. method:: proc getReference(k: keyType) ref

      Get a reference to the element at position `k`. This method is not
      available for non-nilable types.
      

   .. method:: proc getValue(k: keyType)

      
      Get a copy of the element stored at position `k`. This method is only
      available when a orderedMap's `valType` is a non-nilable class.
      

   .. method:: proc getAndRemove(k: keyType)

      
      Remove the element at position `k` from the orderedMap and return its value
      

   .. itermethod:: iter these() const ref

      
      Iterates over the keys of this orderedMap. This is a shortcut for :iter:`keys`.
      
      :yields: A reference to one of the keys contained in this orderedMap.
      

   .. itermethod:: iter keys() const ref

      
      Iterates over the keys of this orderedMap.
      
      :yields: A reference to one of the keys contained in this orderedMap.
      

   .. itermethod:: iter items() const ref

      
      Iterates over the key-value pairs of this orderedMap.
      
      :yields: A tuple of references to one of the key-value pairs contained in
               this orderedMap.
      

   .. itermethod:: iter values() ref

      
      Iterates over the values of this orderedMap.
      
      :yields: A reference to one of the values contained in this orderedMap.
      

   .. method:: proc writeThis(ch: channel) throws

      
      Writes the contents of this orderedMap to a channel. The format looks like:
      
        .. code-block:: chapel
      
           {k1: v1, k2: v2, .... , kn: vn}
      
      :arg ch: A channel to write to.
      

   .. method:: proc add(in k: keyType, in v: valType): bool

      
       Adds a key-value pair to the orderedMap. Method returns `false` if the key
       already exists in the orderedMap.
      
      :arg k: The key to add to the orderedMap
      :type k: keyType
      
      :arg v: The value that maps to ``k``
      :type v: valueType
      
      :returns: `true` if `k` was not in the orderedMap and added with value `v`.
                `false` otherwise.
      :rtype: bool
      

   .. method:: proc set(k: keyType, in v: valType): bool

      
       Sets the value associated with a key. Method returns `false` if the key
       does not exist in the orderedMap.
      
      :arg k: The key whose value needs to change
      :type k: keyType
      
      :arg v: The desired value to the key ``k``
      :type v: valueType
      
      :returns: `true` if `k` was in the orderedMap and its value is updated with `v`.
                `false` otherwise.
      :rtype: bool
      

   .. method:: proc addOrSet(in k: keyType, in v: valType)

      If the orderedMap doesn't contain a value at position `k` add one and
      set it to `v`. If the orderedMap already contains a value at position
      `k`, update it to the value `v`.
      

   .. method:: proc remove(k: keyType): bool

      
       Removes a key-value pair from the orderedMap, with the given key.
       
      :arg k: The key to remove from the orderedMap
      
      :returns: `false` if `k` was not in the orderedMap.  `true` if it was and removed.
      :rtype: bool
      

   .. method:: proc toArray(): [] (keyType, valType)

      
      Returns a new 0-based array containing a copy of key-value pairs as
      tuples.
      
      :return: A new DefaultRectangular array.
      :rtype: [] (keyType, valType)
      

   .. method:: proc keysToArray(): [] keyType

      
      Returns a new 0-based array containing a copy of keys. Array is sorted using 
      the comparator.
      
      :return: A new DefaultRectangular array.
      :rtype: [] keyType
      

   .. method:: proc valuesToArray(): [] valType

      
      Returns a new 0-based array containing a copy of values. Array is not
      guaranteed to be in any particular order.
      
      :return: A new DefaultRectangular array.
      :rtype: [] valType
      

.. method:: proc type orderedMap.=(ref lhs: orderedMap(?kt, ?vt, ?ps), const ref rhs: orderedMap(kt, vt, ps))

   
   Replace the content of this orderedMap with the other's.
   
   .. warning::
   
     This will invalidate any references to elements previously contained in
     `lhs`.
   
   :arg lhs: The orderedMap to assign to.
   :arg rhs: The orderedMap to assign from. 
   

.. method:: proc type orderedMap.==(const ref a: orderedMap(?kt, ?vt, ?ps), const ref b: orderedMap(kt, vt, ps)): bool

   
   Returns `true` if the contents of two orderedMaps are the same.
   
   :arg a: A orderedMap to compare.
   
   :arg b: A orderedMap to compare.
   
   :return: `true` if the contents of two orderedMaps are equal.
   :rtype: `bool`
   

.. method:: proc type orderedMap.!=(const ref a: orderedMap(?kt, ?vt, ?ps), const ref b: orderedMap(kt, vt, ps)): bool

   
   Returns `true` if the contents of two orderedMaps are not the same.
   
   :arg a: A orderedMap to compare.
   
   :arg b: A orderedMap to compare.
   
   :return: `true` if the contents of two orderedMaps are not equal.
   :rtype: `bool`
   

.. method:: proc type orderedMap.+(a: orderedMap(?keyType, ?valueType, ?parSafe), b: orderedMap(keyType, valueType, parSafe))

   
   Returns a new orderedMap containing the keys and values in either a or b.
   

.. method:: proc type orderedMap.+=(ref a: orderedMap(?keyType, ?valueType, ?parSafe), b: orderedMap(keyType, valueType, parSafe))

   
   Sets the left-hand side orderedMap to contain the keys and values in either
   a or b.
   

.. method:: proc type orderedMap.|(a: orderedMap(?keyType, ?valueType, ?parSafe), b: orderedMap(keyType, valueType, parSafe))

   
   Returns a new orderedMap containing the keys and values in either a or b.
   

.. method:: proc type orderedMap.|=(ref a: orderedMap(?keyType, ?valueType, ?parSafe), b: orderedMap(keyType, valueType, parSafe))

   Sets the left-hand side map to contain the keys and values in either
   a or b.
   

.. method:: proc type orderedMap.&(a: orderedMap(?keyType, ?valueType, ?parSafe), b: orderedMap(keyType, valueType, parSafe))

   
   Returns a new orderedMap containing the keys that are in both a and b.
   

.. method:: proc type orderedMap.&=(ref a: orderedMap(?keyType, ?valueType, ?parSafe), b: orderedMap(keyType, valueType, parSafe))

   Sets the left-hand side orderedMap to contain the keys that are in both a and b.
   
   .. warning::
   
     This will invalidate any references to elements previously contained in
     `lhs`.
   
   

.. method:: proc type orderedMap.-(a: orderedMap(?keyType, ?valueType, ?parSafe), b: orderedMap(keyType, valueType, parSafe))

   
   Returns a new orderedMap containing the keys that are only in a, but not b.
   

.. method:: proc type orderedMap.-=(ref a: orderedMap(?keyType, ?valueType, ?parSafe), b: orderedMap(keyType, valueType, parSafe))

   Sets the left-hand side orderedMap to contain the keys that are in the
   left-hand orderedMap, but not the right-hand orderedMap. 

.. method:: proc type orderedMap.^(a: orderedMap(?keyType, ?valueType, ?parSafe), b: orderedMap(keyType, valueType, parSafe))

   
   Returns a new orderedMap containing the keys that are in either a or b, but
   not both.
   
   

.. method:: proc type orderedMap.^=(ref a: orderedMap(?keyType, ?valueType, ?parSafe), b: orderedMap(keyType, valueType, parSafe))

   Sets the left-hand side orderedMap to contain the keys that are in either the
   left-hand orderedMap or the right-hand orderedMap, but not both. 

